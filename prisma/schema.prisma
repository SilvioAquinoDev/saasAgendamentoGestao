generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  points        Point[]
  rewards       Reward[]
  role          Role     @default(USER)
  accounts      Account[]
  sessions      Session[]
  bookings      Booking[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Barbershop {
  id          String              @id @default(uuid())
  name        String
  address     String
  phones      String[]
  description String
  imageUrl    String
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  services    BarbershopService[]
}

model BarbershopService {
  id           String     @id @default(uuid())
  name         String
  description  String
  imageUrl     String
  price        Decimal    @db.Decimal(10, 2)
  barbershopId String
  barbershop   Barbershop @relation(fields: [barbershopId], references: [id])
  bookings     Booking[]
}

model Booking {
  id        String            @id @default(uuid())
  userId    String?
  user      User?              @relation(fields: [userId], references: [id])
  serviceId String
  service   BarbershopService @relation(fields: [serviceId], references: [id])
  date      DateTime
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  name       String?
  phone      String?
  serviceName String?
  servicePrice String?
  serviceTime String?       
}

model Point {
  id          String    @id @default(cuid())
  amount      Int
  description String
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
}

model Reward {
  id          String    @id @default(cuid())
  name        String
  description String
  pointsCost  Int
  userId      String?
  user        User?    @relation(fields: [userId], references: [id])
  isRedeemed  Boolean  @default(false)
  createdAt   DateTime @default(now())
}

enum Role {
  USER
  ADMIN
}

model Stock {
  id          String    @id @default(cuid())
  name        String
  amount      Int
  userId      String
  createdAt   DateTime @default(now())
}

model Business {
  id          String    @id @default(cuid())
  name        String
  price       Decimal    @db.Decimal(10, 2)
  date        DateTime
  userId      String
  createdAt   DateTime @default(now())
}
